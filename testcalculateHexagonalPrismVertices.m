% This is an autogenerated sample test for file calculateHexagonalPrismVertices.m
classdef testcalculateHexagonalPrismVertices < matlab.unittest.TestCase

    methods (Test)

        function test_prism_z_axis_has_two_sets_of_planes(testCase)
            radius = 1.43;
            height = 0.44;
            orientation = [0,0,1];
            center = [0,0,0];


            % Exercise the function calculateHexagonalPrismVertices
            actual_vertices = calculateHexagonalPrismVertices(radius, height, orientation, center);

            nVertices = size(actual_vertices,1);
            bottomVertices = actual_vertices(1:nVertices/2,:);
            topVertices = actual_vertices(nVertices/2+1,:);

            v1 = bottomVertices(1,:);
            v2 = topVertices(1,:);

            % coplanarity test
            % https://en.wikipedia.org/wiki/Coplanarity
            testCase.verifyLessThanOrEqual(rank(bottomVertices-v1),2.0);
            testCase.verifyLessThanOrEqual(rank(topVertices-v2),2.0);
            
        end

        function test_prism_random_axis_has_two_sets_of_planes(testCase)
            radius = 1.43;
            height = 0.44;
            orientation = [4.5,3.2,-1];
            center = [0,0,0];


            % Exercise the function calculateHexagonalPrismVertices
            actual_vertices = calculateHexagonalPrismVertices(radius, height, orientation, center);

            nVertices = size(actual_vertices,1);
            bottomVertices = actual_vertices(1:nVertices/2,:);
            topVertices = actual_vertices(nVertices/2+1,:);

            v1 = bottomVertices(1,:);
            v2 = topVertices(1,:);

            % coplanarity test
            % https://en.wikipedia.org/wiki/Coplanarity
            testCase.verifyLessThanOrEqual(rank(bottomVertices-v1),2.0);
            testCase.verifyLessThanOrEqual(rank(topVertices-v2),2.0);
            
        end

        function test_prism_random_axis_has_two_hexagons(testCase)
            radius = 0.76;
            height = 0.32;
            orientation = [-2.3,4.5,0.6];
            center = [0,0.3,0.1];


            % Exercise the function calculateHexagonalPrismVertices
            actual_vertices = calculateHexagonalPrismVertices(radius, height, orientation, center);

            nVertices = size(actual_vertices,1);
            bottomVertices = actual_vertices(1:nVertices/2,:);
            topVertices = actual_vertices(nVertices/2+1:end,:);

            % verify that they are hexagons
            testCase.verifyEqual(size(bottomVertices,1),6);
            testCase.verifyEqual(size(topVertices,1),6);

            v1 = bottomVertices(1,:);
            v2 = topVertices(1,:);

            % coplanarity test
            % https://en.wikipedia.org/wiki/Coplanarity
            testCase.verifyLessThanOrEqual(rank(bottomVertices-v1),2.0);
            testCase.verifyLessThanOrEqual(rank(topVertices-v2),2.0);

            % matrix of distances between pairs of vertices
            bottomPairs = [bottomVertices(2:end,:);bottomVertices(1,:)] - bottomVertices;
            topPairs = [topVertices(2:end,:);topVertices(1,:)] - topVertices;

            edges = [bottomPairs;topPairs];
            tol = 1e-6;
            for i = 1:size(edges,1)
                edge = edges(i,:);
                testCase.verifyLessThanOrEqual( ...
                    abs(norm(edge) - radius), ...
                    tol)

                % test that edges are normal to orientation
                testCase.verifyLessThanOrEqual( ...
                    dot(edge,orientation),tol)
            end
        end


      function test_center_is_calculated(testCase)
            radius = 0.76;
            height = 0.32;
            orientation = [-2.3,4.5,0.6];
            center1 = [0,0.3,0.1];
            center2 = [0,0,0];


            % Exercise the function calculateHexagonalPrismVertices
            V1 = calculateHexagonalPrismVertices(radius, height, orientation, center1);
            V2 = calculateHexagonalPrismVertices(radius, height, orientation, center2);

            tol = 1e-6;
            testCase.verifyLessThanOrEqual(abs(mean(V1)-center1),tol);
            testCase.verifyLessThanOrEqual(abs(mean(V2)-center2),tol);


        end
    end
end