% This is an autogenerated sample test for file STLExtractor.m
classdef testSTLExtractor < matlab.unittest.TestCase

    properties (TestParameter)
       nParticles = {48,100,200};
       largeFile = {
           "packing_parameters_5_4_success.stl",...
           "packing_parameters_15_1_success.stl"}
    end
    methods (Test)

        function test_process_can_identify_number_of_triangles(testCase,nParticles)
            testFileDir = fullfile(projectDir,"tests","test_stl_files");

            workingDir = "test_output";


            for i = nParticles
                
                filename = fullfile(testFileDir,['particles_',num2str(i),'.stl']);
                e = STLExtractor(filename,workingDir);
                ep = e.process();
                
                testCase.verifyEqual(length(ep), i);

            end


        end

        function test_process_can_parse_one_particle(testCase)
            testFileDir = fullfile(projectDir,"tests","test_stl_files");
            tol = 1e-3;
            workingDir = "test_output"; 
            basenames = [...
                "particle_r_1_t_1_c_0_0_0_n_0_0_1.stl",...
                "particle_r_2_t_3_c_0_0_0_n_0_1_0.stl" ,...
                ];
            for basename = basenames
                filename = fullfile(testFileDir,basename);
                e = STLExtractor(filename,workingDir);
                % Exercise the function obj.process
                ep = e.process();
    
                testCase.verifyEqual(length(ep), 1);
    
                prism = ep.items(1);
    
                tokens = regexp(filename,'particle_r_(\d)_t_(\d)_c_(\d)_(\d)_(\d)_n_(\d)_(\d)_(\d)*','tokens');
                tokens = tokens{1};
                radius = str2double(tokens{1});
                thickness = str2double(tokens{2});
    
                center = [str2double(tokens{3}),str2double(tokens{4}),str2double(tokens{5})];
                normal = [str2double(tokens{6}),str2double(tokens{7}),str2double(tokens{8})];
                normal = normal./norm(normal);
                testCase.verifyLessThanOrEqual(abs(prism.radius-radius),tol);
                testCase.verifyLessThanOrEqual(abs(prism.thickness-thickness),tol);

                % if the normal is the xy-axis, it doesn't matter whether the
                % axis is flipped
                isParallelToX = abs(...
                    abs(dot(prism.normal,[1,0,0])) - 1.0) < tol;
                isParallelToY = abs(...
                    abs(dot(prism.normal,[0,1,0])) - 1.0) < tol;

                if isParallelToX || isParallelToY
                testCase.verifyLessThanOrEqual(abs(abs(prism.normal)-normal),tol);
                else
                    testCase.verifyLessThanOrEqual(abs(prism.normal-normal),tol);
                end
                testCase.verifyLessThanOrEqual(abs(prism.position-center),tol);

            end


        end
    
        function test_can_process_larger_packings(testCase,largeFile)

                testFileDir = fullfile(projectDir,"tests","test_stl_files");
                filename = fullfile(testFileDir,largeFile);
                e = STLExtractor(filename,[],"ShouldPlot",false,"ShouldSave",false);
                l = e.process();

                testCase.verifyNotEmpty(l);


        end
    end
end