% This is an autogenerated sample test for file HexagonalPrism.m
classdef testHexagonalPrism < matlab.unittest.TestCase


    methods (Test)
        function test_canInstantiateHexagonalPrism(testCase)
            % Specify the input(s) of
            % HexagonalPrism
            normal = [1,1,1];
            faceRotation = [1,2,3];
            position = [-8049.1919,-4430.0356,937.63038];
            radius = 9575.0684;
            thickness = 9648.8854;


            % Exercise the function HexagonalPrism
            actual_obj = HexagonalPrism(position, radius, thickness, normal, faceRotation);

            % dummy statement just to exercise the call above
            testCase.verifyTrue(true);

        end

        function test_parsing_real_stl_yields_fan_triangulation(testCase)
            testFileDir = fullfile(projectDir,"tests","test_stl_files");
            tol = 1e-3;
            workingDir = "test_output"; 
            basenames = [...
                "particle_r_1_t_1_c_0_0_0_n_0_0_1.stl",...
                "particle_r_2_t_3_c_0_0_0_n_0_1_0.stl" ,...
                ];
            for basename = basenames
                filename = fullfile(testFileDir,basename);
                e = STLExtractor(filename,workingDir);
                % Exercise the function obj.process
                ep = e.process();
    
                
    
                prism = ep.items(1);
    
                tokens = regexp(filename,'particle_r_(\d)_t_(\d)_c_(\d)_(\d)_(\d)_n_(\d)_(\d)_(\d)*','tokens');
                tokens = tokens{1};
                radius = str2double(tokens{1});
                thickness = str2double(tokens{2});
    
                center = [str2double(tokens{3}),str2double(tokens{4}),str2double(tokens{5})];
                normal = [str2double(tokens{6}),str2double(tokens{7}),str2double(tokens{8})];
                normal = normal./norm(normal);

                % check that we have one hexagonal prism and can access it
                testCase.verifyEqual(length(ep), 1);
                hp = ep.items(1);
                testCase.verifyInstanceOf(hp,"HexagonalPrism");

                testCase.verifyInstanceOf(hp.triangulation,"triangulation");

                % we should be able to create an hexagonal prism without the
                % triangulation and still get the same triangulation
                % woTR = "without triangulation"
                hpWOTR = HexagonalPrism(center,radius,thickness,normal,[0,0,0]);
                testCase.verifyEqual(hp,hpWOTR);

            end

        end
    end
end